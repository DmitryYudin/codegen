/* eslint-disable */
/* tslint:disable */

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Animal {
  id: 'cat' | 'dog'
  'is-alive': boolean
  type: 'cat' | 'dog'
  name: string
  nickname?: string
  account?: string
  age: number
  height?: number
  weight?: number
  awards?: string[]
}
export interface EncodeTask {
  task_id: string
  source: FsFileAddr | S3FileAddr
  destination: FsFileAddr | S3FileAddr
  bitrate?: number
  options: StringOptions
}
export interface FsFileAddr {
  provider: 'fs'
  file_uri: string
}
export interface S3FileAddr {
  provider: 's3'
  file_uri: string
  s3_region?: string
  host_uri: string
  bucket: string
}
export interface StringOptions {
  [k: string]: string
}
export interface TransformTask {
  task_id: string
  source: FsFileAddr | S3FileAddr
  destination: FsFileAddr | S3FileAddr
  transform?: Transform
}
export interface Transform {
  angle: number
  x: number
  y: number
}
export type Id = string
export type Type = 'bicycle' | 'car' | 'truck'

export interface Vehicle {
  id: Id
  type: Type
  drivers: Driver[]
  props: Props
}
export interface Driver {
  name: string
  id: Id
}
export interface Props {
  [k: string]: string
}
/* eslint-disable */
/* tslint:disable */

const animal = {
  "type": "object",
  "additionalProperties": false,
  "required": [
    "id",
    "is-alive",
    "type",
    "name",
    "age"
  ],
  "properties": {
    "id": {
      "enum": [
        "cat",
        "dog"
      ]
    },
    "is-alive": {
      "type": "boolean"
    },
    "type": {
      "type": "string",
      "enum": [
        "cat",
        "dog"
      ]
    },
    "name": {
      "type": "string",
      "minLength": 1
    },
    "nickname": {
      "type": "string",
      "minLength": 5,
      "maxLength": 20
    },
    "account": {
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]+$"
    },
    "age": {
      "type": "integer",
      "min": 0,
      "max": 100
    },
    "height": {
      "type": "number",
      "multipleOf": 42
    },
    "weight": {
      "type": "number",
      "exclusiveMinimum": 1
    },
    "awards": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "$id": "animal"
}
const definitions = {
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "TaskId": {
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]+$"
    },
    "StringOptions": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "FsFileAddr": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "provider",
        "file_uri"
      ],
      "properties": {
        "provider": {
          "type": "string",
          "enum": [
            "fs"
          ]
        },
        "file_uri": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "S3FileAddr": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "provider",
        "file_uri",
        "host_uri",
        "bucket"
      ],
      "properties": {
        "provider": {
          "type": "string",
          "enum": [
            "s3"
          ]
        },
        "file_uri": {
          "type": "string",
          "minLength": 1
        },
        "s3_region": {
          "type": "string"
        },
        "host_uri": {
          "type": "string",
          "minLength": 1
        },
        "bucket": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "FileAddr": {
      "anyOf": [
        {
          "$ref": "#/definitions/FsFileAddr"
        },
        {
          "$ref": "#/definitions/S3FileAddr"
        }
      ]
    }
  },
  "$id": "definitions"
}
const encode_task = {
  "type": "object",
  "additionalProperties": false,
  "required": [
    "task_id",
    "source",
    "destination",
    "options"
  ],
  "properties": {
    "task_id": {
      "$ref": "definitions#/definitions/TaskId"
    },
    "source": {
      "$ref": "definitions#/definitions/FileAddr"
    },
    "destination": {
      "$ref": "definitions#/definitions/FileAddr"
    },
    "bitrate": {
      "type": "integer",
      "min": 0
    },
    "options": {
      "$ref": "definitions#/definitions/StringOptions"
    }
  },
  "$id": "encode_task"
}
const transform_task = {
  "type": "object",
  "additionalProperties": false,
  "required": [
    "task_id",
    "source",
    "destination"
  ],
  "properties": {
    "task_id": {
      "$ref": "definitions#/definitions/TaskId"
    },
    "source": {
      "$ref": "definitions#/definitions/FileAddr"
    },
    "destination": {
      "$ref": "definitions#/definitions/FileAddr"
    },
    "transform": {
      "$ref": "#/definitions/Transform"
    }
  },
  "definitions": {
    "Transform": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "angle",
        "x",
        "y"
      ],
      "properties": {
        "angle": {
          "type": "number"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        }
      }
    }
  },
  "$id": "transform_task"
}
const vehicle = {
  "type": "object",
  "additionalProperties": false,
  "required": [
    "id",
    "type",
    "drivers",
    "props"
  ],
  "properties": {
    "id": {
      "$ref": "#/definitions/Id"
    },
    "type": {
      "$ref": "#/definitions/Type"
    },
    "drivers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Driver"
      }
    },
    "props": {
      "$ref": "#/definitions/Props"
    }
  },
  "definitions": {
    "Id": {
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]+$"
    },
    "Type": {
      "enum": [
        "bicycle",
        "car",
        "truck"
      ]
    },
    "Driver": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "min": 5
        },
        "id": {
          "$ref": "#/definitions/Id"
        }
      }
    },
    "Props": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "$id": "vehicle"
}

import { default as Ajv, ValidateFunction } from "ajv"

const ajv = new Ajv({strict: false, allErrors: true})
ajv.addSchema(animal)
ajv.addSchema(definitions)
ajv.addSchema(encode_task)
ajv.addSchema(transform_task)
ajv.addSchema(vehicle)

export const validators = {
    animal: ajv.compile<Animal>(animal),
    encode_task: ajv.compile<EncodeTask>(encode_task),
    transform_task: ajv.compile<TransformTask>(transform_task),
    vehicle: ajv.compile<Vehicle>(vehicle),
}

function deserialize<T>(json: string, validator: ValidateFunction<T>): T {
    const o = JSON.parse(json)
    if(!validator(o))
        throw Error(ajv.errorsText(validator.errors).split(',').join('\n'))
    return o as T
}

export const deserializers = {
    animal: (json:string) => deserialize(json, validators.animal),
    encode_task: (json:string) => deserialize(json, validators.encode_task),
    transform_task: (json:string) => deserialize(json, validators.transform_task),
    vehicle: (json:string) => deserialize(json, validators.vehicle),
}
